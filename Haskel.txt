Prime Number
============

isPrime :: Int -> Bool
isPrime n
    | n <= 1 = False
    | otherwise = all (\x -> n `mod` x /= 0) [2..(floor . sqrt $ fromIntegral n)]

primeNumbers :: Int -> [Int]
primeNumbers n = filter isPrime [2..n]

main :: IO ()
main = do
    putStrLn "Enter a number:"
    input <- getLine
    let number = read input :: Int
    putStrLn $ "Prime numbers up to " ++ show number ++ " are: " ++ show (primeNumbers number)


Factorial
=========

factorial :: Int -> Int 
factorial x = 
    if x == 0 
    then 1
    else x*factorial (x-1)
main = do
print(factorial 5)


OverLoading
===========

multiply :: (Num a) => a -> a -> a
multiply x y = x * y

main :: IO ()
main = do
    let result1 = multiply (3 :: Int) (4 :: Int)
        result2 = multiply (2.5 :: Float) (1.5::Float)
        result3 = multiply (10 :: Double) (3.5 :: Double)  
    putStrLn $ "Result 1: " ++ show result1
    putStrLn $ "Result 2: " ++ show result2
    putStrLn $ "Result 3: " ++ show result3

Tuple 2x2 Matrix
================

coordinates :: (Num a) => (a,a) -> (a,a) -> (a,a)
coordinates (x1,y1) (x2,y2) = (x1+x2 , y1+y2)
main :: IO()
main = do
 let result =(coordinates)(3 :: Int, 7 :: Int)(3 :: Int, 7 :: Int)
 print  result


Add List Elements using Resursion
=================================

addList :: (Num a)=> [a] -> a
addList [] = 0
addList (x:xs) = x + addList xs

main :: IO()
main = do
 let l = [1..5]
 print (addList l)


Len of List using recursion
===========================

lenList :: [a] -> Int
lenList []  = 0         
lenList (_:xs) = 1 + lenList xs  

main :: IO ()
main = do
    let l = [1..5]
    print (lenList l)

Keep only Capital Letters 
=========================
removeNonUpper :: String -> String
removeNonUpper st = [c | c <-st ,c `elem` ['A'..'Z']]

main :: IO()
main = do
 print( remoceNonUpper "AdjDeS")



read funciton Typecast
=====================
main = do
let demo = read "100" :: Int
print(demo)